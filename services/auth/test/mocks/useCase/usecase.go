// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/useCase/interface.go

// Package useCase is a generated GoMock package.
package useCase

import (
	device "auth/internal/domain/device"
	agent "auth/internal/domain/device/agent"
	ip "auth/internal/domain/device/ip"
	refreshToken "auth/internal/domain/device/refreshToken"
	user "auth/internal/domain/user"
	email "auth/internal/domain/user/email"
	pass "auth/internal/domain/user/pass"
	phone "auth/internal/domain/user/phone"
	useCase "auth/internal/useCase"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// RefreshToken mocks base method.
func (m *MockUseCase) RefreshToken(ctx context.Context, userID uuid.UUID, refreshToken refreshToken.RefreshToken, ip ip.Ip, agent agent.Agent) (useCase.RefreshResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, userID, refreshToken, ip, agent)
	ret0, _ := ret[0].(useCase.RefreshResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockUseCaseMockRecorder) RefreshToken(ctx, userID, refreshToken, ip, agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockUseCase)(nil).RefreshToken), ctx, userID, refreshToken, ip, agent)
}

// ResendVerificationCode mocks base method.
func (m *MockUseCase) ResendVerificationCode(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendVerificationCode", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendVerificationCode indicates an expected call of ResendVerificationCode.
func (mr *MockUseCaseMockRecorder) ResendVerificationCode(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendVerificationCode", reflect.TypeOf((*MockUseCase)(nil).ResendVerificationCode), ctx, userID)
}

// ResetPasswordProcess mocks base method.
func (m *MockUseCase) ResetPasswordProcess(ctx context.Context, resetRequestID uuid.UUID, newPass pass.Pass) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordProcess", ctx, resetRequestID, newPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordProcess indicates an expected call of ResetPasswordProcess.
func (mr *MockUseCaseMockRecorder) ResetPasswordProcess(ctx, resetRequestID, newPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordProcess", reflect.TypeOf((*MockUseCase)(nil).ResetPasswordProcess), ctx, resetRequestID, newPass)
}

// ResetPasswordRequest mocks base method.
func (m *MockUseCase) ResetPasswordRequest(ctx context.Context, email email.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordRequest", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordRequest indicates an expected call of ResetPasswordRequest.
func (mr *MockUseCaseMockRecorder) ResetPasswordRequest(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordRequest", reflect.TypeOf((*MockUseCase)(nil).ResetPasswordRequest), ctx, email)
}

// SignIn mocks base method.
func (m *MockUseCase) SignIn(ctx context.Context, phone phone.Phone, pass pass.Pass, inputDevice *device.Device) (useCase.SignInResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, phone, pass, inputDevice)
	ret0, _ := ret[0].(useCase.SignInResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUseCaseMockRecorder) SignIn(ctx, phone, pass, inputDevice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUseCase)(nil).SignIn), ctx, phone, pass, inputDevice)
}

// SignUp mocks base method.
func (m *MockUseCase) SignUp(ctx context.Context, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUseCaseMockRecorder) SignUp(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUseCase)(nil).SignUp), ctx, user)
}

// VerifyEmail mocks base method.
func (m *MockUseCase) VerifyEmail(ctx context.Context, verificationCode uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, verificationCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUseCaseMockRecorder) VerifyEmail(ctx, verificationCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUseCase)(nil).VerifyEmail), ctx, verificationCode)
}
