// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/useCase/adapters/storage/interface.go

// Package storage is a generated GoMock package.
package storage

import (
	device "auth/internal/domain/device"
	deviceID "auth/internal/domain/device/deviceID"
	refreshToken "auth/internal/domain/device/refreshToken"
	user "auth/internal/domain/user"
	email "auth/internal/domain/user/email"
	pass "auth/internal/domain/user/pass"
	phone "auth/internal/domain/user/phone"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUser) DeleteUser(ctx context.Context, ID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserMockRecorder) DeleteUser(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUser)(nil).DeleteUser), ctx, ID)
}

// ReadUserByCredetinals mocks base method.
func (m *MockUser) ReadUserByCredetinals(ctx context.Context, phone phone.Phone, pass pass.Pass) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByCredetinals", ctx, phone, pass)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByCredetinals indicates an expected call of ReadUserByCredetinals.
func (mr *MockUserMockRecorder) ReadUserByCredetinals(ctx, phone, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByCredetinals", reflect.TypeOf((*MockUser)(nil).ReadUserByCredetinals), ctx, phone, pass)
}

// ReadUserByEmail mocks base method.
func (m *MockUser) ReadUserByEmail(ctx context.Context, email email.Email) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByEmail", ctx, email)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByEmail indicates an expected call of ReadUserByEmail.
func (mr *MockUserMockRecorder) ReadUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByEmail", reflect.TypeOf((*MockUser)(nil).ReadUserByEmail), ctx, email)
}

// ReadUserByID mocks base method.
func (m *MockUser) ReadUserByID(ctx context.Context, ID uuid.UUID) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByID", ctx, ID)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByID indicates an expected call of ReadUserByID.
func (mr *MockUserMockRecorder) ReadUserByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByID", reflect.TypeOf((*MockUser)(nil).ReadUserByID), ctx, ID)
}

// UpdateUser mocks base method.
func (m *MockUser) UpdateUser(ctx context.Context, ID uuid.UUID, updateFn func(*user.User) (*user.User, error)) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, ID, updateFn)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserMockRecorder) UpdateUser(ctx, ID, updateFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUser)(nil).UpdateUser), ctx, ID, updateFn)
}

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockDevice) CreateDevice(ctx context.Context, device *device.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDeviceMockRecorder) CreateDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDevice)(nil).CreateDevice), ctx, device)
}

// DeleteDevice mocks base method.
func (m *MockDevice) DeleteDevice(ctx context.Context, ID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockDeviceMockRecorder) DeleteDevice(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockDevice)(nil).DeleteDevice), ctx, ID)
}

// ReadDeviceByID mocks base method.
func (m *MockDevice) ReadDeviceByID(ctx context.Context, ID uuid.UUID) (*device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDeviceByID", ctx, ID)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDeviceByID indicates an expected call of ReadDeviceByID.
func (mr *MockDeviceMockRecorder) ReadDeviceByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDeviceByID", reflect.TypeOf((*MockDevice)(nil).ReadDeviceByID), ctx, ID)
}

// ReadDeviceByUserIDAndRefresh mocks base method.
func (m *MockDevice) ReadDeviceByUserIDAndRefresh(ctx context.Context, userID uuid.UUID, refreshToken refreshToken.RefreshToken) (*device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDeviceByUserIDAndRefresh", ctx, userID, refreshToken)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDeviceByUserIDAndRefresh indicates an expected call of ReadDeviceByUserIDAndRefresh.
func (mr *MockDeviceMockRecorder) ReadDeviceByUserIDAndRefresh(ctx, userID, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDeviceByUserIDAndRefresh", reflect.TypeOf((*MockDevice)(nil).ReadDeviceByUserIDAndRefresh), ctx, userID, refreshToken)
}

// ReadDevicesByDeviceID mocks base method.
func (m *MockDevice) ReadDevicesByDeviceID(ctx context.Context, deviceID deviceID.DeviceID) (*device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDevicesByDeviceID", ctx, deviceID)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDevicesByDeviceID indicates an expected call of ReadDevicesByDeviceID.
func (mr *MockDeviceMockRecorder) ReadDevicesByDeviceID(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDevicesByDeviceID", reflect.TypeOf((*MockDevice)(nil).ReadDevicesByDeviceID), ctx, deviceID)
}

// UpdateDevice mocks base method.
func (m *MockDevice) UpdateDevice(ctx context.Context, ID uuid.UUID, updateFn func(*device.Device) (*device.Device, error)) (*device.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, ID, updateFn)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockDeviceMockRecorder) UpdateDevice(ctx, ID, updateFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDevice)(nil).UpdateDevice), ctx, ID, updateFn)
}
